
#include <iostream>
#include "LinkedList.h"

using namespace std;

LinkedList::LinkedList() {
	top = bottom = nullptr;
	size = 0;
} //LinkedList

void LinkedList::addTop(int v) {
	Node* p = new Node();
	p->data = v;
	p->next = top;
	top = p;
	if (size == 0) {
		bottom = p;
	}
	size++;
} //addTop

void LinkedList::addBottom(int v) {
	Node* p = new Node();
	p->data = v;
	p->next = nullptr;
	if (size == 0) {
		top = bottom = p;
	}
	else {
		bottom->next = p;
		bottom = p;
	}
	size++;
} //addBottom

int LinkedList::getSize() {
	return size;
} //getSize

void LinkedList::display() {
	Node* p = top;
	while (p != nullptr) {
		cout << p->data << endl;
		p = p->next;
	}
}//display

bool LinkedList::deleteVal(int v) {
	Node* trail = top;
	Node* lead = top->next;
	if (lead == nullptr) {
		deleteBottom();
		size--;
		return true; 
	}
	else if (v == top->data) {
		deleteTop();
		size--;
		return true; 
	}
	else {
		if (size == 0) {
			return false;
		}
		while (lead != nullptr && lead->data != v) {
			trail = lead;
			lead = lead->next;
		}

		if (lead != nullptr) {
			trail->next = lead->next;
			delete lead;
			size--;
			return true;
		}

		else {
			return false;
		}
	}
}


void LinkedList::deleteTop() {
	Node* x = top;
	if (size == 0) {
		cout << "list is empty" << endl;
	}
	else if (x->next == nullptr){
		delete x;
		top = nullptr;
		size--;
		cout << "list is now empty" << endl;
	}
	else {
		top = top->next;
		delete x;
		size--;
	}
}

void LinkedList::deleteBottom() {
	Node* x = top; 
	
	if (x == nullptr) {
		cout << "list is empty" << endl;
	}

	else if (x->next == nullptr) {
		delete x;
		top = nullptr;
		size--; 
		cout << "list is now empty" << endl; 
	}
	else {
		while (x->next->next != nullptr) {
			x = x->next;
		}
		Node* temp = x->next;
		x->next = nullptr;
		delete temp; 
		size--;
	}
}

int LinkedList::countValues(int v) {
	Node* curr = top; 
	int cnt = 0;
	while (curr != nullptr) {
		if (curr->data == v) {
			cnt += 1;
			curr = curr->next;
		}
		else {
			curr = curr->next;
		}
	}
	return cnt; 
}

double LinkedList::average() {
	int sum = 0;
	Node* runner = top;
	while (runner != nullptr) {
		sum += runner->data; 
	}
	return (double) sum / size; 
}
